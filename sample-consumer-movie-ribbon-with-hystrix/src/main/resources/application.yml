spring:
  application:
    name: microservice-consumer-movie-ribbon-with-hystrix
  cloud:
    circuitbreaker:
      hystrix:
        enabled: true
    
server:
  port: 8011
eureka:
  client:
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: http://zhang:123@localhost:8761/eureka
  instance:
    prefer-ip-address: true

# hystrix 请求超时时间 默认是1s
hystrix:
  command: 
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000
        
# 开启hystrix.stream监听地址   /actuator/hystrix.stream, 貌似只适用于@HystrixCommand
management:
  endpoints:
    web:
      exposure:
        include: hystrix.stream
            
            
            
#hystrix 熔断机制
#hystrix:
#  shareSecurityContext: true
#  command:
#    default:
#      circuitBreaker:
#        # 熔断后的重试时间窗口，且在该时间窗口内只允许一次重试。即在熔断开关打开后，在该时间窗口允许有一次重试，如果重试成功，则将重置Health采样统计并闭合熔断开关实现快速恢复，否则熔断开关还是打开状态，执行快速失败, 默认为为5s。
#        sleepWindowInMilliseconds: 10000
#        # 如果在一个采样时间窗口内，失败率超过该配置，则自动打开熔断开关实现降级处理，即快速失败。默认配置下采样周期为10s，失败率为50%。
#        errorThresholdPercentage: 50
#        # 在熔断开关闭合情况下，在进行失败率判断之前，一个采样周期内必须进行至少N个请求才能进行采样统计，目的是有足够的采样使得失败率计算正确，默认为20。
#        requestVolumeThreshold: 20
#        # 是否强制关闭熔断开关，如果强制关闭了熔断开关，则请求不会被降级，一些特殊场景可以动态配置该开关，默认为false。
#        forceClosed: false
#        # 是否强制打开熔断开关，如果强制打开可熔断开关，则请求强制降级调用getFallback处理，可以通过动态配置来打开该开关实现一些特殊需求，默认为false。
#        forceOpen: false
#      execution:
#        isolation:
#          thread:
#            # 是否启用执行超时机制，默认为true
#            timeoutEnabled: true
#            # 执行超时时间，默认为1000毫秒，如果命令是线程隔离，且配置了executionIsolationThreadInterruptOnTimeout=true，则执行线程将执行中断处理。如果命令是信号量隔离，则进行终止操作，因为信号量隔离与主线程是在一个线程中执行，其不会中断线程处理，所以要根据实际情况来决定是否采用信号量隔离，尤其涉及网络访问的情况。
#            timeoutInMilliseconds: 5000
#            # 当隔离策略为THREAD时，当执行线程执行超时时，是否进行中断处理，即Future#cancel(true)处理，默认为false。
#            interruptOnFutureCancel: true
#            # 当隔离策略为THREAD时，当执行线程执行超时时，是否进行中断处理，默认为true。

            
